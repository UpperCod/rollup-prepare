{"version":3,"file":"rollup-prepare.mjs","sources":["../src/index.js"],"sourcesContent":["function getName(file) {\r\n    let match = file.match(/([^\\/]+)\\.(\\w+)$/);\r\n    if (match) {\r\n        return match[1].split(\".\")[0];\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nfunction camelCase(string) {\r\n    return string.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase());\r\n}\r\n\r\nfunction ignoreLog(message, next) {\r\n    if (/MIXED_EXPORTS|MISSING_GLOBAL_NAME|MIXED_EXPORTS/.test(message.code))\r\n        return;\r\n    next(message);\r\n}\r\n\r\nexport default function bundle({\r\n    pkg,\r\n    ignore = [],\r\n    globals,\r\n    external,\r\n    logger = true,\r\n    sourcemap = true\r\n}) {\r\n    let config = {\r\n        input: pkg.source,\r\n        external: external || Object.keys(pkg.dependencies || {}),\r\n        output: []\r\n    };\r\n\r\n    globals = globals || pkg.globals || {};\r\n\r\n    if (logger) config.onwarn = ignoreLog;\r\n\r\n    for (let prop in pkg) {\r\n        let [all, type] =\r\n            prop.match(/^(umd|module|main|iife)(?::(.+)){0,1}$/) || [];\r\n\r\n        if (ignore.indexOf(prop) > -1 || !type) continue;\r\n\r\n        let file = pkg[prop],\r\n            name = camelCase(getName(file));\r\n        switch (type) {\r\n            case \"umd\":\r\n            case \"iife\":\r\n                config.output.push({\r\n                    file,\r\n                    name,\r\n                    globals,\r\n                    sourcemap,\r\n                    format: type\r\n                });\r\n                break;\r\n            case \"module\":\r\n            case \"main\":\r\n                config.output.push({\r\n                    file,\r\n                    sourcemap,\r\n                    format: type === \"main\" ? \"cjs\" : \"es\"\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    return config;\r\n}\r\n"],"names":["getName","file","let","match","split","ignoreLog","message","next","test","code","ref","config","input","pkg","source","external","Object","keys","dependencies","output","prop","globals","logger","onwarn","ignore","indexOf","type","name","replace","all","letter","toUpperCase","push","sourcemap","format"],"mappings":"AAAA,SAASA,EAAQC,GACbC,IAAIC,EAAQF,EAAKE,MAAM,oBACvB,OAAIA,EACOA,EAAM,GAAGC,MAAM,KAAK,GAEpB,GAQf,SAASC,EAAUC,EAASC,GACpB,kDAAkDC,KAAKF,EAAQG,OAEnEF,EAAKD,kBAGM,SAAgBI,wFAKlB,qCACG,GAEZR,IAAIS,GACAC,MAAOC,EAAIC,OACXC,qBAAsBC,OAAOC,KAAKJ,EAAIK,kBACtCC,WAOJ,IAAKjB,IAAIkB,KAJTC,EAAUA,GAAWR,EAAIQ,YAErBC,IAAQX,EAAOY,OAASlB,GAEXQ,EAAK,CAClB,MACIO,EAAKjB,MAAM,qDAEf,KAAIqB,EAAOC,QAAQL,IAAS,IAAMM,EAAlC,CAEAxB,IAAID,EAAOY,EAAIO,GACXO,EAAiB3B,EAAQC,GAlCnB2B,QAAQ,qBAAcC,EAAKC,UAAWA,EAAOC,gBAmCvD,OAAQL,GACJ,IAAK,MACL,IAAK,OACDf,EAAOQ,OAAOa,WACV/B,OACA0B,UACAN,YACAY,EACAC,OAAQR,IAEZ,MACJ,IAAK,SACL,IAAK,OACDf,EAAOQ,OAAOa,WACV/B,YACAgC,EACAC,OAAiB,SAATR,EAAkB,MAAQ,SAKlD,OAAOf"}